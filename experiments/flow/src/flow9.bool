let bnot : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] -> [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] =
  fun (x : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] ) -> 
    (9 (not x.(0/9)) (not x.(1/9)) (not x.(2/9)) (not x.(3/9)) (not x.(4/9)) (not x.(5/9)) (not x.(6/9)) (not x.(7/9)) (not x.(8/9)));;
let eq : Bool -> Bool -> Bool = 
  fun (x : Bool) -> fun (y : Bool) -> 
    x && y || (not x && not y) in

let x : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] = 
    (9 (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false)) in
let y : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] = bnot x in

assume x.(0/9) || not x.(0/9);
assume x.(1/9) || not x.(1/9);
assume x.(2/9) || not x.(2/9);
assume x.(3/9) || not x.(3/9);
assume x.(4/9) || not x.(4/9);
assume x.(5/9) || not x.(5/9);
assume x.(6/9) || not x.(6/9);
assume x.(7/9) || not x.(7/9);
assume x.(8/9) || not x.(8/9);
assume eq x.(0/9) y.(0/9) || 
       eq x.(1/9) y.(1/9) || 
       eq x.(2/9) y.(2/9) || 
       eq x.(3/9) y.(3/9) || 
       eq x.(4/9) y.(4/9) || 
       eq x.(5/9) y.(5/9) || 
       eq x.(6/9) y.(6/9) || 
       eq x.(7/9) y.(7/9) || 
       eq x.(8/9) y.(8/9);
fail([]);;
