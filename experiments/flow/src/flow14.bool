let bnot : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] -> [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] =
  fun (x : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] ) -> 
    (14 (not x.(0/14)) (not x.(1/14)) (not x.(2/14)) (not x.(3/14)) (not x.(4/14)) (not x.(5/14)) (not x.(6/14)) (not x.(7/14)) (not x.(8/14)) (not x.(9/14)) (not x.(10/14)) (not x.(11/14)) (not x.(12/14)) (not x.(13/14)));;
let eq : Bool -> Bool -> Bool = 
  fun (x : Bool) -> fun (y : Bool) -> 
    x && y || (not x && not y) in

let x : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] = 
    (14 (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false)) in
let y : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] = bnot x in

assume x.(0/14) || not x.(0/14);
assume x.(1/14) || not x.(1/14);
assume x.(2/14) || not x.(2/14);
assume x.(3/14) || not x.(3/14);
assume x.(4/14) || not x.(4/14);
assume x.(5/14) || not x.(5/14);
assume x.(6/14) || not x.(6/14);
assume x.(7/14) || not x.(7/14);
assume x.(8/14) || not x.(8/14);
assume x.(9/14) || not x.(9/14);
assume x.(10/14) || not x.(10/14);
assume x.(11/14) || not x.(11/14);
assume x.(12/14) || not x.(12/14);
assume x.(13/14) || not x.(13/14);
assume eq x.(0/14) y.(0/14) || 
       eq x.(1/14) y.(1/14) || 
       eq x.(2/14) y.(2/14) || 
       eq x.(3/14) y.(3/14) || 
       eq x.(4/14) y.(4/14) || 
       eq x.(5/14) y.(5/14) || 
       eq x.(6/14) y.(6/14) || 
       eq x.(7/14) y.(7/14) || 
       eq x.(8/14) y.(8/14) || 
       eq x.(9/14) y.(9/14) || 
       eq x.(10/14) y.(10/14) || 
       eq x.(11/14) y.(11/14) || 
       eq x.(12/14) y.(12/14) || 
       eq x.(13/14) y.(13/14);
fail([]);;
