let bnot : [Bool,Bool,Bool,Bool] -> [Bool,Bool,Bool,Bool] =
  fun (x : [Bool,Bool,Bool,Bool] ) -> 
    (4 (not x.(0/4)) (not x.(1/4)) (not x.(2/4)) (not x.(3/4)));;
let eq : Bool -> Bool -> Bool = 
  fun (x : Bool) -> fun (y : Bool) -> 
    x && y || (not x && not y) in

let x : [Bool,Bool,Bool,Bool] = 
    (4 (true <> false) (true <> false) (true <> false) (true <> false)) in
let y : [Bool,Bool,Bool,Bool] = bnot x in

assume x.(0/4) || not x.(0/4);
assume x.(1/4) || not x.(1/4);
assume x.(2/4) || not x.(2/4);
assume x.(3/4) || not x.(3/4);
assume eq x.(0/4) y.(0/4) || 
       eq x.(1/4) y.(1/4) || 
       eq x.(2/4) y.(2/4) || 
       eq x.(3/4) y.(3/4);
fail([]);;
