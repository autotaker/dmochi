let bnot : [Bool,Bool,Bool,Bool,Bool] -> [Bool,Bool,Bool,Bool,Bool] =
  fun (x : [Bool,Bool,Bool,Bool,Bool] ) -> 
    (5 (not x.(0/5)) (not x.(1/5)) (not x.(2/5)) (not x.(3/5)) (not x.(4/5)));;
let eq : Bool -> Bool -> Bool = 
  fun (x : Bool) -> fun (y : Bool) -> 
    x && y || (not x && not y) in

let x : [Bool,Bool,Bool,Bool,Bool] = 
    (5 (true <> false) (true <> false) (true <> false) (true <> false) (true <> false)) in
let y : [Bool,Bool,Bool,Bool,Bool] = bnot x in

assume x.(0/5) || not x.(0/5);
assume x.(1/5) || not x.(1/5);
assume x.(2/5) || not x.(2/5);
assume x.(3/5) || not x.(3/5);
assume x.(4/5) || not x.(4/5);
assume eq x.(0/5) y.(0/5) || 
       eq x.(1/5) y.(1/5) || 
       eq x.(2/5) y.(2/5) || 
       eq x.(3/5) y.(3/5) || 
       eq x.(4/5) y.(4/5);
fail([]);;
