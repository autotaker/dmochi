let bnot : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] -> [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] =
  fun (x : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] ) -> 
    (13 (not x.(0/13)) (not x.(1/13)) (not x.(2/13)) (not x.(3/13)) (not x.(4/13)) (not x.(5/13)) (not x.(6/13)) (not x.(7/13)) (not x.(8/13)) (not x.(9/13)) (not x.(10/13)) (not x.(11/13)) (not x.(12/13)));;
let eq : Bool -> Bool -> Bool = 
  fun (x : Bool) -> fun (y : Bool) -> 
    x && y || (not x && not y) in

let x : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] = 
    (13 (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false)) in
let y : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] = bnot x in

assume x.(0/13) || not x.(0/13);
assume x.(1/13) || not x.(1/13);
assume x.(2/13) || not x.(2/13);
assume x.(3/13) || not x.(3/13);
assume x.(4/13) || not x.(4/13);
assume x.(5/13) || not x.(5/13);
assume x.(6/13) || not x.(6/13);
assume x.(7/13) || not x.(7/13);
assume x.(8/13) || not x.(8/13);
assume x.(9/13) || not x.(9/13);
assume x.(10/13) || not x.(10/13);
assume x.(11/13) || not x.(11/13);
assume x.(12/13) || not x.(12/13);
assume eq x.(0/13) y.(0/13) || 
       eq x.(1/13) y.(1/13) || 
       eq x.(2/13) y.(2/13) || 
       eq x.(3/13) y.(3/13) || 
       eq x.(4/13) y.(4/13) || 
       eq x.(5/13) y.(5/13) || 
       eq x.(6/13) y.(6/13) || 
       eq x.(7/13) y.(7/13) || 
       eq x.(8/13) y.(8/13) || 
       eq x.(9/13) y.(9/13) || 
       eq x.(10/13) y.(10/13) || 
       eq x.(11/13) y.(11/13) || 
       eq x.(12/13) y.(12/13);
fail([]);;
