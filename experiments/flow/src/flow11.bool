let bnot : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] -> [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] =
  fun (x : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] ) -> 
    (11 (not x.(0/11)) (not x.(1/11)) (not x.(2/11)) (not x.(3/11)) (not x.(4/11)) (not x.(5/11)) (not x.(6/11)) (not x.(7/11)) (not x.(8/11)) (not x.(9/11)) (not x.(10/11)));;
let eq : Bool -> Bool -> Bool = 
  fun (x : Bool) -> fun (y : Bool) -> 
    x && y || (not x && not y) in

let x : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] = 
    (11 (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false)) in
let y : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] = bnot x in

assume x.(0/11) || not x.(0/11);
assume x.(1/11) || not x.(1/11);
assume x.(2/11) || not x.(2/11);
assume x.(3/11) || not x.(3/11);
assume x.(4/11) || not x.(4/11);
assume x.(5/11) || not x.(5/11);
assume x.(6/11) || not x.(6/11);
assume x.(7/11) || not x.(7/11);
assume x.(8/11) || not x.(8/11);
assume x.(9/11) || not x.(9/11);
assume x.(10/11) || not x.(10/11);
assume eq x.(0/11) y.(0/11) || 
       eq x.(1/11) y.(1/11) || 
       eq x.(2/11) y.(2/11) || 
       eq x.(3/11) y.(3/11) || 
       eq x.(4/11) y.(4/11) || 
       eq x.(5/11) y.(5/11) || 
       eq x.(6/11) y.(6/11) || 
       eq x.(7/11) y.(7/11) || 
       eq x.(8/11) y.(8/11) || 
       eq x.(9/11) y.(9/11) || 
       eq x.(10/11) y.(10/11);
fail([]);;
