let bnot : [Bool,Bool,Bool,Bool,Bool,Bool,Bool] -> [Bool,Bool,Bool,Bool,Bool,Bool,Bool] =
  fun (x : [Bool,Bool,Bool,Bool,Bool,Bool,Bool] ) -> 
    (7 (not x.(0/7)) (not x.(1/7)) (not x.(2/7)) (not x.(3/7)) (not x.(4/7)) (not x.(5/7)) (not x.(6/7)));;
let eq : Bool -> Bool -> Bool = 
  fun (x : Bool) -> fun (y : Bool) -> 
    x && y || (not x && not y) in

let x : [Bool,Bool,Bool,Bool,Bool,Bool,Bool] = 
    (7 (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false)) in
let y : [Bool,Bool,Bool,Bool,Bool,Bool,Bool] = bnot x in

assume x.(0/7) || not x.(0/7);
assume x.(1/7) || not x.(1/7);
assume x.(2/7) || not x.(2/7);
assume x.(3/7) || not x.(3/7);
assume x.(4/7) || not x.(4/7);
assume x.(5/7) || not x.(5/7);
assume x.(6/7) || not x.(6/7);
assume eq x.(0/7) y.(0/7) || 
       eq x.(1/7) y.(1/7) || 
       eq x.(2/7) y.(2/7) || 
       eq x.(3/7) y.(3/7) || 
       eq x.(4/7) y.(4/7) || 
       eq x.(5/7) y.(5/7) || 
       eq x.(6/7) y.(6/7);
fail([]);;
