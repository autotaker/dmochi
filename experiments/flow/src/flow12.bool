let bnot : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] -> [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] =
  fun (x : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] ) -> 
    (12 (not x.(0/12)) (not x.(1/12)) (not x.(2/12)) (not x.(3/12)) (not x.(4/12)) (not x.(5/12)) (not x.(6/12)) (not x.(7/12)) (not x.(8/12)) (not x.(9/12)) (not x.(10/12)) (not x.(11/12)));;
let eq : Bool -> Bool -> Bool = 
  fun (x : Bool) -> fun (y : Bool) -> 
    x && y || (not x && not y) in

let x : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] = 
    (12 (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false)) in
let y : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] = bnot x in

assume x.(0/12) || not x.(0/12);
assume x.(1/12) || not x.(1/12);
assume x.(2/12) || not x.(2/12);
assume x.(3/12) || not x.(3/12);
assume x.(4/12) || not x.(4/12);
assume x.(5/12) || not x.(5/12);
assume x.(6/12) || not x.(6/12);
assume x.(7/12) || not x.(7/12);
assume x.(8/12) || not x.(8/12);
assume x.(9/12) || not x.(9/12);
assume x.(10/12) || not x.(10/12);
assume x.(11/12) || not x.(11/12);
assume eq x.(0/12) y.(0/12) || 
       eq x.(1/12) y.(1/12) || 
       eq x.(2/12) y.(2/12) || 
       eq x.(3/12) y.(3/12) || 
       eq x.(4/12) y.(4/12) || 
       eq x.(5/12) y.(5/12) || 
       eq x.(6/12) y.(6/12) || 
       eq x.(7/12) y.(7/12) || 
       eq x.(8/12) y.(8/12) || 
       eq x.(9/12) y.(9/12) || 
       eq x.(10/12) y.(10/12) || 
       eq x.(11/12) y.(11/12);
fail([]);;
