let exists_0 : ([] -> []) -> ([] -> []) -> [Bool] -> [] -> [[Bool], [Bool, Bool]] =
    fun (test_13 : [] -> []) ->
        fun (f_14 : [] -> []) ->
            fun (n_15 : [Bool]) ->
                fun (m_16 : []) ->
                    (assume true <>
                            false;
                     let v_17 : [] =
                         f_14 (0) in
                     let b_18 : [] =
                         test_13 (0) in
                     (assume true <>
                             false;
                      let x_31 : [Bool] =
                          let bool_32 : Bool =
                              true in
                          (1 bool_32) in
                      let y_33 : [Bool, Bool] =
                          let int_34 : Bool =
                              (assume n_15.(0/1);
                               true) <>
                              (assume not n_15.(0/1);
                               false) in
                          let int_35 : Bool =
                              true in
                          (2 int_34 int_35) in
                      (2 x_31 y_33)) <>
                     (assume true <>
                             false;
                      let r_19 : [[Bool], [Bool, Bool]] =
                          exists_0 test_13 f_14 (let int_36 : Bool =
                                                     true <>
                                                     (assume not n_15.(0/1);
                                                      false) in
                                                 (1 int_36)) (0) in
                      let x_37 : [Bool] =
                          let bool_38 : Bool =
                              (assume r_19.(0/2).(0/1);
                               true) <>
                              (assume not r_19.(0/2).(0/1);
                               false) in
                          (1 bool_38) in
                      let y_39 : [Bool, Bool] =
                          let int_40 : Bool =
                              (assume r_19.(1/2).(0/2);
                               true) <>
                              (assume not r_19.(1/2).(0/2);
                               false) in
                          let int_41 : Bool =
                              (assume r_19.(1/2).(1/2);
                               true) <>
                              (assume not r_19.(1/2).(1/2);
                               false) in
                          (2 int_40 int_41) in
                      (2 x_37 y_39))) <>
                    (assume true <>
                            false;
                     let x_42 : [Bool] =
                         let bool_43 : Bool =
                             false in
                         (1 bool_43) in
                     let y_44 : [Bool, Bool] =
                         let int_45 : Bool =
                             false in
                         let int_46 : Bool =
                             (assume n_15.(0/1);
                              true) <>
                             false in
                         (2 int_45 int_46) in
                     (2 x_42 y_44));;
let rand_int_1 : [] -> [] =
    fun (n_21 : []) ->
        (0);;
let n_22 : [] =
    rand_int_1 (0) in
let m_23 : [] =
    rand_int_1 (0) in
let test_26 : [] -> [] =
    fun (x_25 : []) ->
        (0) in
let mult3_29 : [] -> [] =
    fun (x_28 : []) ->
        (0) in
let r_30 : [[Bool], [Bool, Bool]] =
    exists_0 (fun (x_47 : []) ->
                  let y_48 : [] =
                      (0) in
                  let z_49 : [] =
                      test_26 y_48 in
                  (0)) (fun (x_50 : []) ->
                            let y_51 : [] =
                                (0) in
                            let z_52 : [] =
                                mult3_29 y_51 in
                            (0)) (let int_53 : Bool =
                                      true in
                                  (1 int_53)) (0) in
assume (assume r_30.(0/2).(0/1);
        true) <>
       (assume not r_30.(0/2).(0/1);
        false);
assume (assume r_30.(0/2).(0/1) && not (r_30.(1/2).(0/2) && r_30.(1/2).(1/2));
        true) <>
       (assume r_30.(0/2).(0/1) && r_30.(1/2).(0/2) && r_30.(1/2).(1/2);
        false);
fail([])
