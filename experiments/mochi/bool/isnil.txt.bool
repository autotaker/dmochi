let make_list_0 : [] -> [[Bool, Bool, Bool], [] -> []] =
    fun (n_9 : []) ->
        (assume true <>
                false;
         let f_12 : [] -> [] =
             fun (j_11 : []) ->
                 (0) in
         let x_32 : [Bool, Bool, Bool] =
             let int_33 : Bool =
                 true in
             let int_34 : Bool =
                 false in
             let int_35 : Bool =
                 true in
             (3 int_33 int_34 int_35) in
         let y_36 : [] -> [] =
             fun (x_37 : []) ->
                 let y_38 : [] =
                     (0) in
                 let z_39 : [] =
                     f_12 y_38 in
                 (0) in
         (2 x_32 y_36)) <>
        (assume true <>
                false;
         let p1_13 : [[Bool, Bool, Bool], [] -> []] =
             make_list_0 (0) in
         let f_15 : [] -> [] =
             p1_13.(1/2) in
         let g_19 : [] -> [] =
             fun (j_17 : []) ->
                 (assume true <>
                         false;
                  (0)) <>
                 (assume true <>
                         false;
                  let z_18 : [] =
                      f_15 (0) in
                  (0)) in
         let x_40 : [Bool, Bool, Bool] =
             let int_41 : Bool =
                 true <>
                 (assume not p1_13.(0/2).(0/3) && not p1_13.(0/2).(1/3);
                  false) in
             let int_42 : Bool =
                 (assume int_41 && p1_13.(0/2).(0/3);
                  true) <>
                 (assume not p1_13.(0/2).(0/3) && not p1_13.(0/2).(1/3);
                  false) in
             let int_43 : Bool =
                 (assume p1_13.(0/2).(2/3);
                  true) <>
                 false in
             (3 int_41 int_42 int_43) in
         let y_44 : [] -> [] =
             fun (x_45 : []) ->
                 let y_46 : [] =
                     (0) in
                 let z_47 : [] =
                     g_19 y_46 in
                 (0) in
         (2 x_40 y_44));;
let is_nil_1 : [[Bool, Bool], [] -> []] -> [Bool] =
    fun (p_26 : [[Bool, Bool], [] -> []]) ->
        let bool_48 : Bool =
            (assume p_26.(0/2).(0/2) && not p_26.(0/2).(1/2);
             true) <>
            false in
        (1 bool_48);;
let rand_int_2 : [] -> [] =
    fun (x_28 : []) ->
        (0);;
let n_29 : [] =
    rand_int_2 (0) in
let xs_30 : [[Bool, Bool, Bool], [] -> []] =
    make_list_0 (0) in
assume (assume not xs_30.(0/2).(2/3);
        true) <>
       (assume xs_30.(0/2).(2/3);
        false);
let b_31 : [Bool] =
    is_nil_1 (let x_49 : [Bool, Bool] =
                  let int_50 : Bool =
                      (assume xs_30.(0/2).(0/3) && not xs_30.(0/2).(2/3);
                       true) <>
                      (assume not xs_30.(0/2).(0/3) && not xs_30.(0/2).(1/3) && not xs_30.(0/2).(2/3);
                       false) in
                  let int_51 : Bool =
                      (assume int_50 && xs_30.(0/2).(0/3) && xs_30.(0/2).(1/3) && not xs_30.(0/2).(2/3);
                       true) <>
                      (assume not xs_30.(0/2).(1/3) && not xs_30.(0/2).(2/3);
                       false) in
                  (2 int_50 int_51) in
              let y_52 : [] -> [] =
                  fun (x_53 : []) ->
                      let y_54 : [] =
                          (0) in
                      let z_55 : [] =
                          xs_30.(1/2) y_54 in
                      (0) in
              (2 x_49 y_52)) in
assume (assume b_31.(0/1) && not xs_30.(0/2).(2/3);
        true) <>
       (assume not b_31.(0/1) && not xs_30.(0/2).(2/3);
        false);
fail([])
