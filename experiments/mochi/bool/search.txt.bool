let exists_0 : ([Bool] -> [Bool, Bool]) -> ([Bool] -> [Bool]) -> [] -> [Bool] -> [[Bool], [Bool, Bool, Bool]] =
    fun (test_19 : [Bool] -> [Bool, Bool]) ->
        fun (f_20 : [Bool] -> [Bool]) ->
            fun (n_21 : []) ->
                fun (m_22 : [Bool]) ->
                    (assume true <>
                            false;
                     let v_23 : [Bool] =
                         f_20 (let int_42 : Bool =
                                   (assume m_22.(0/1);
                                    true) <>
                                   (assume not m_22.(0/1);
                                    false) in
                               (1 int_42)) in
                     let b_24 : [Bool, Bool] =
                         test_19 (let int_43 : Bool =
                                      true <>
                                      (assume not v_23.(0/1);
                                       false) in
                                  (1 int_43)) in
                     (assume (assume b_24.(1/2);
                              true) <>
                             (assume not b_24.(1/2);
                              false);
                      let x_44 : [Bool] =
                          let bool_45 : Bool =
                              assume b_24.(1/2);
                              true in
                          (1 bool_45) in
                      let y_46 : [Bool, Bool, Bool] =
                          let int_47 : Bool =
                              assume b_24.(1/2);
                              true in
                          let int_48 : Bool =
                              (assume b_24.(1/2) && int_47 && m_22.(0/1);
                               true) <>
                              (assume b_24.(1/2) && int_47 && not m_22.(0/1) && not v_23.(0/1);
                               false) in
                          let int_49 : Bool =
                              assume b_24.(1/2) && int_47;
                              false in
                          (3 int_47 int_48 int_49) in
                      (2 x_44 y_46)) <>
                     (assume (assume not b_24.(1/2);
                              true) <>
                             (assume b_24.(1/2);
                              false);
                      let r_25 : [[Bool], [Bool, Bool, Bool]] =
                          exists_0 test_19 f_20 (0) (let int_50 : Bool =
                                                         (assume not b_24.(1/2);
                                                          true) <>
                                                         (assume not b_24.(1/2) && not m_22.(0/1) && not v_23.(0/1);
                                                          false) in
                                                     (1 int_50)) in
                      let x_51 : [Bool] =
                          let bool_52 : Bool =
                              (assume not b_24.(1/2) && r_25.(0/2).(0/1) && not r_25.(1/2).(2/3);
                               true) <>
                              (assume not b_24.(1/2) && not r_25.(0/2).(0/1) && r_25.(1/2).(2/3);
                               false) in
                          (1 bool_52) in
                      let y_53 : [Bool, Bool, Bool] =
                          let int_54 : Bool =
                              (assume not b_24.(1/2) && r_25.(1/2).(0/3) && not (r_25.(0/2).(0/1) && r_25.(1/2).(2/3));
                               true) <>
                              (assume not b_24.(1/2) && not r_25.(1/2).(0/3) && not (r_25.(0/2).(0/1) && r_25.(1/2).(2/3));
                               false) in
                          let int_55 : Bool =
                              (assume not b_24.(1/2) && r_25.(1/2).(1/3) && not (r_25.(0/2).(0/1) && r_25.(1/2).(2/3));
                               true) <>
                              (assume not b_24.(1/2) && not r_25.(1/2).(1/3) && not (r_25.(0/2).(0/1) && r_25.(1/2).(2/3));
                               false) in
                          let int_56 : Bool =
                              (assume not b_24.(1/2) && not r_25.(0/2).(0/1) && r_25.(1/2).(2/3);
                               true) <>
                              (assume not b_24.(1/2) && r_25.(0/2).(0/1) && not r_25.(1/2).(2/3);
                               false) in
                          (3 int_54 int_55 int_56) in
                      (2 x_51 y_53))) <>
                    (assume true <>
                            false;
                     let x_57 : [Bool] =
                         let bool_58 : Bool =
                             false in
                         (1 bool_58) in
                     let y_59 : [Bool, Bool, Bool] =
                         let int_60 : Bool =
                             (assume m_22.(0/1);
                              true) <>
                             false in
                         let int_61 : Bool =
                             false in
                         let int_62 : Bool =
                             true in
                         (3 int_60 int_61 int_62) in
                     (2 x_57 y_59));;
let rand_int_1 : [] -> [] =
    fun (n_27 : []) ->
        (0);;
let n_28 : [] =
    rand_int_1 (0) in
let m_29 : [] =
    rand_int_1 (0) in
let test_35 : [Bool] -> [Bool, Bool] =
    fun (x_34 : [Bool]) ->
        let bool_63 : Bool =
            (assume x_34.(0/1);
             true) <>
            (assume not x_34.(0/1);
             false) in
        let bool_64 : Bool =
            true <>
            false in
        (2 bool_63 bool_64) in
let mult3_40 : [Bool] -> [Bool] =
    fun (x_39 : [Bool]) ->
        let int_65 : Bool =
            (assume x_39.(0/1);
             true) <>
            (assume not x_39.(0/1);
             false) in
        (1 int_65) in
let r_41 : [[Bool], [Bool, Bool, Bool]] =
    exists_0 (fun (x_66 : [Bool]) ->
                  let y_67 : [Bool] =
                      let int_68 : Bool =
                          (assume x_66.(0/1);
                           true) <>
                          (assume not x_66.(0/1);
                           false) in
                      (1 int_68) in
                  let z_69 : [Bool, Bool] =
                      test_35 y_67 in
                  let bool_70 : Bool =
                      (assume x_66.(0/1) && z_69.(0/2);
                       true) <>
                      (assume not x_66.(0/1) && not z_69.(0/2);
                       false) in
                  let bool_71 : Bool =
                      (assume z_69.(1/2);
                       true) <>
                      (assume not z_69.(1/2);
                       false) in
                  (2 bool_70 bool_71)) (fun (x_72 : [Bool]) ->
                                            let y_73 : [Bool] =
                                                let int_74 : Bool =
                                                    (assume x_72.(0/1);
                                                     true) <>
                                                    (assume not x_72.(0/1);
                                                     false) in
                                                (1 int_74) in
                                            let z_75 : [Bool] =
                                                mult3_40 y_73 in
                                            let int_76 : Bool =
                                                (assume x_72.(0/1) && z_75.(0/1);
                                                 true) <>
                                                (assume not z_75.(0/1);
                                                 false) in
                                            (1 int_76)) (0) (let int_77 : Bool =
                                                                 true in
                                                             (1 int_77)) in
assume (assume r_41.(0/2).(0/1) && not r_41.(1/2).(2/3);
        true) <>
       (assume not r_41.(0/2).(0/1) && r_41.(1/2).(2/3);
        false);
assume (assume r_41.(0/2).(0/1) && not r_41.(1/2).(2/3) && not (r_41.(1/2).(0/3) && r_41.(1/2).(1/3));
        true) <>
       (assume r_41.(0/2).(0/1) && r_41.(1/2).(0/3) && r_41.(1/2).(1/3) && not r_41.(1/2).(2/3);
        false);
fail([])
