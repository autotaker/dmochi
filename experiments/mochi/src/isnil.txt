(*
let is_nil (xs:int list) =
  match xs with
      [] -> true
    | _ -> false

let rec make_list n =
  if n = 0
  then []
  else n :: make_list (n-1)

let main n =
  let xs = make_list n in
    if n > 0
    then assert (not (is_nil xs))
    else ()
*)

let make_list : n:int -> (m:int[m. m >= 0; m. 1 <= m; m. n <= 0] * (i:int -> int)) = 
	fun n ->
		(assume n = 0;
     let f : j:int -> int = fun j -> 0 in
     (0,f)) <>
		(assume not (n = 0);
		 let p1 = make_list (n-1) in
     let m = p1.fst in
     let f = p1.snd in
     let g : j:int -> int = fun j ->
       (assume (j = 0); n) <>
       (assume not (j = 0); 
        let z = f (j - 1) in z) in
     (m+1,g)
		 );;

let is_nil : p : (n : int[n.n >= 0; n. 1 <= n] * (i:int -> int)) -> bool[b.b] =
  fun p -> p.fst = 0;;

let rand_int : x : int[] -> int[] =
    fun x -> 0;;

let n = rand_int 0 in
let xs = make_list n in
assume n > 0;
let b = is_nil xs in
assume b;
Fail
    
		 
