(* fold_left
let rec fold_left (f:int->int->int) acc xs =
  match xs with
      [] -> acc
    | x::xs' -> fold_left f (f acc x) xs'

let rec make_list n =
  if n < 0
  then []
  else n :: make_list (n-1)

let add x y = x + y

let main n m =
  let xs = make_list n in
    assert (fold_left add m xs >= m)
*)

let head : p: (n:int * (i:int -> int[r. r >= 1])) -> int[r. r >= 1] =
	fun p -> 
		let f = p.snd in
		let z = f 0 in
		z;;
		
let tail : p: (n:int * (i:int -> int[r.r >= 1])) -> (m:int * (j:int -> int[r.r >= 1])) =
	fun p ->
		let n = p.fst in
		let f = p.snd in
		let g : j:int -> int[r.r >= 1] = fun j -> let v = f (j + 1) in v in
		(n-1,g)

(*
let nil : n:int -> (m:int[n. n >= 0; n. 1 <= n] * (j:int -> int[r.r >= 1])) =
	fun n -> 
		let f : j:int -> int[r.r >= 1] = fun j -> assume false; 0 in
		(0,f)

let cons : x:int[x.x >= 1] -> p:(n:int[n. n >= 0; n. 1 <= n] * (i:int -> int[r.r >= 1])) -> (m:int[n. n >= 0; n. 1 <= n] * (j:int -> int[r.r >= 1])) =
	fun x -> fun p ->
		let n = p.fst in
		let f = p.snd in
		let g : j:int -> int[r.r>=1] = fun j ->
			(assume (j = 0); x) <>
			(assume (not (j = 0)); 
			 let z = f (j - 1) in z) in
		(n+1,g)
*)

let fold_left : f : (x1 : int -> x2 : int[x2.x2 >=1] -> int[r. 1 <= - x1 + r]) -> 
                acc : int -> 
                xs : (x1 : int * (i : int -> int[r.r >= 1])) -> 
                int[r. 1 <= -acc + r; r. r >= acc] =
  fun f -> fun acc -> fun xs -> 
    (assume xs.fst = 0;acc) <>
    (assume not (xs.fst = 0);
     let xs1 = tail xs in
     let x   = head xs in
     let acc1 = f acc x in
     let r   = fold_left f acc1 xs1 in
     r);;

let make_list : n:int -> (m:int[m. n >= 0;m. 1 <= n] * (i:int -> int[r.r >= 1])) = 
	fun n ->
		(assume n = 0;
     let f : j:int -> int[r.r >= 1] = fun j -> assume false; 0 in
     (0,f)) <>
		(assume not (n = 0);
		 let p1 = make_list (n-1) in
     let m = p1.fst in
     let f = p1.snd in
     let g : j:int -> int[r.r>=1] = fun j ->
       (assume (j = 0); n) <>
       (assume (not (j = 0)); 
        let z = f (j - 1) in z) in
     (m+1,g));;

let rand_int : x : int -> int =
    fun x -> 0;;

let add : x : int -> y : int[y.y >= 1] -> int[r. 1 <= -x + r] = 
  fun x -> fun y -> x + y;;

let n = rand_int 0 in
let m = rand_int 0 in
let xs = make_list n in
let r = fold_left add m xs in
assume (r < m);
Fail
