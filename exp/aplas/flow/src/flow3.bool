let bnot : [Bool,Bool,Bool] -> [Bool,Bool,Bool] =
  fun (x : [Bool,Bool,Bool] ) -> 
    (3 (not x.(0/3)) (not x.(1/3)) (not x.(2/3)));;
let eq : Bool -> Bool -> Bool = 
  fun (x : Bool) -> fun (y : Bool) -> 
    x && y || (not x && not y) in

let x : [Bool,Bool,Bool] = 
    (3 (true <> false) (true <> false) (true <> false)) in
let y : [Bool,Bool,Bool] = bnot x in

assume x.(0/3) || not x.(0/3);
assume x.(1/3) || not x.(1/3);
assume x.(2/3) || not x.(2/3);
assume eq x.(0/3) y.(0/3) || 
       eq x.(1/3) y.(1/3) || 
       eq x.(2/3) y.(2/3);
fail([]);;
