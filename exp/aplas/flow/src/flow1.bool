let bnot : [Bool] -> [Bool] =
  fun (x : [Bool] ) -> 
    (1 (not x.(0/1)));;
let eq : Bool -> Bool -> Bool = 
  fun (x : Bool) -> fun (y : Bool) -> 
    x && y || (not x && not y) in

let x : [Bool] = 
    (1 (true <> false)) in
let y : [Bool] = bnot x in

assume x.(0/1) || not x.(0/1);
assume eq x.(0/1) y.(0/1);
fail([]);;
