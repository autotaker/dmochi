let bnot : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] -> [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] =
  fun (x : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] ) -> 
    (8 (not x.(0/8)) (not x.(1/8)) (not x.(2/8)) (not x.(3/8)) (not x.(4/8)) (not x.(5/8)) (not x.(6/8)) (not x.(7/8)));;
let eq : Bool -> Bool -> Bool = 
  fun (x : Bool) -> fun (y : Bool) -> 
    x && y || (not x && not y) in

let x : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] = 
    (8 (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false) (true <> false)) in
let y : [Bool,Bool,Bool,Bool,Bool,Bool,Bool,Bool] = bnot x in

assume x.(0/8) || not x.(0/8);
assume x.(1/8) || not x.(1/8);
assume x.(2/8) || not x.(2/8);
assume x.(3/8) || not x.(3/8);
assume x.(4/8) || not x.(4/8);
assume x.(5/8) || not x.(5/8);
assume x.(6/8) || not x.(6/8);
assume x.(7/8) || not x.(7/8);
assume eq x.(0/8) y.(0/8) || 
       eq x.(1/8) y.(1/8) || 
       eq x.(2/8) y.(2/8) || 
       eq x.(3/8) y.(3/8) || 
       eq x.(4/8) y.(4/8) || 
       eq x.(5/8) y.(5/8) || 
       eq x.(6/8) y.(6/8) || 
       eq x.(7/8) y.(7/8);
fail([]);;
