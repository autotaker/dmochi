let make_array : [int, int] -> [int] -> int = 
    fun n s -> fun i -> 
        if (0 <= i && i < n) then s else Fail
let update : [int, int, ([int] -> int), int] -> [int] -> int =
    fun i n a x ->
        let tmp = a i in
        let a : [int] -> int = fun j -> if i=j then x else a j in a

(* fv: plen pat *)
let loopShift : [int, ([int] -> int)] -> [int, int, ([int] -> int)] -> [int] -> int =
    fun plen pat -> fun i j shiftArray1 ->
        let loopShift = loopShift plen pat in
        if j = plen then shiftArray1 else
          if not (pat j = pat (i+1)) then
            if (i >= 0) then
              loopShift (shiftArray1 i) j shiftArray1
            else loopShift (-1) (j+1) shiftArray1
          else
            let shiftArray2 : [int] -> int = if i+1 < j then update j plen shiftArray1 (i+1) else shiftArray1 in
              loopShift (shiftArray1 j) (j+1) shiftArray2;;

(* fv: plen slen str pat shiftArray3 *)
let loop : [int, ([int] -> int), int, ([int] -> int), ([int] -> int)] -> [int,int] -> int =
  fun slen str plen pat shiftArray3 -> fun s p ->
    let loop = loop slen str plen pat shiftArray3 in
    if p < plen then
      if  s < slen then
        if str s = pat p then
          loop (s+1) (p+1)
        else
          if p = 0 then
            loop (s+1) p
          else
            loop s (shiftArray3 (p-1) + 1)
        else (-1)
    else (s - plen);;

let kmpMatch : [int, ([int] -> int), int, ([int] -> int)] -> int =
  fun slen str plen pat ->
  let loopShift = loopShift plen pat in
  let shiftArray0 = make_array plen (-1) in
  let shiftArray3 = loopShift (-1) 1 shiftArray0 in
  let loop = loop slen str plen pat shiftArray3 in
  loop 0 0;;

let n = * in
let a = * in
let m = * in
let b = * in
let array1 = make_array n a in
let array2 = make_array m b in
assume n > 0 && m > 0;
kmpMatch n array1 m array2
