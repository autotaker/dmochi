let make_array : [int] -> int = fun n -> n;;
let arraysize : [int] -> int = fun src -> src;;
let update : [int, int, int] -> int = fun des i x -> assert (0 <= i && i < des);;
let sub : [int,int] -> int = fun src i -> assert( 0 <= i && i < src);;
let div2 : [int] -> int =
    fun x -> 
        if x >= 0 then 
            let r = * in
            assume 0 <= r && r <= x; r
        else
            let r = * in
            assume x <= r && r <= 0; r;;

let bs_aux : [int,int,int,int] -> int =
    fun key vec l u ->
    if u < l
    then -1
    else
        let m = l + div2 (u - l) in
        let x = sub vec m in
        if x < key then bs_aux key vec (m + 1) u
        else if x > key then bs_aux key vec l (m - 1)
        else m;;
let bsearch : [int,int] -> int = fun key vec -> bs_aux key vec 0 (arraysize vec - 1);;

let n = * in
let m = * in
let v1 = make_array n in
let v2 = make_array m in
assume 0 <= n && n = m;
bsearch v1 v2
           

