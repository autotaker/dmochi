let twice : [([([int] -> int)] -> [int] -> int), ([int] -> int)] -> [int] -> int =
    fun f x -> fun z -> let tmp = f (f x) in tmp 0;;
let g : [int] -> [int] -> int = fun n -> fun z -> n;;
let neg : [([int] -> int)] -> [int] -> int = fun x -> fun z -> - x 0;;
let n = * in
assume n >= 0;
let tmp = twice neg (g n) in
let z =  tmp 0 in
assert(z >= 0);;
