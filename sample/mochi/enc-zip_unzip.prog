let f : [([int,int] -> int)] -> [int, int] -> int =
    fun g -> fun x y -> g (x + 1) (y + 1);;

let zip : [int, int] -> int =
    fun x y ->
        if x = 0 then
            if y = 0 then 0
            else Fail
        else if y = 0 then
            Fail
        else
            let r = zip (x - 1) (y - 1) in
            1 + r;;

let unzip : [int, ([int,int] -> int)] -> int =
    fun x k ->
      if x = 0 then let r = k 0 0 in r
      else unzip (x - 1) (f k)

let map : [int] -> int =
    fun x -> if x = 0 then 0 else let r = map (x - 1) in 1 + r;;

let n = * in
unzip n zip

