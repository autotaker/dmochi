(*
let rec for_all f (xs:(int*int) list) =
  match xs with
      [] -> true
    | x::xs' ->
        f x && for_all f xs'

let rec eq_pair ((x:int),(y:int)) = x = y

let rec make_list n =
  if n < 0
  then []
  else (n,n) :: make_list (n-1)

let main n = assert (for_all eq_pair (make_list n))
*)

let head : p: (n:int * (i:int -> x:int * int[r.r = x])) -> (y : int * int[r. r = y]) =
	fun p -> 
		let f = p.snd in
		let z = f 0 in
		z;;
		
let tail : p: (n:int * (i:int -> x:int * int[r.r = x])) -> (m:int * (j:int -> y:int * int[r.r = y])) =
	fun p ->
		let n = p.fst in
		let f = p.snd in
		let g : j:int -> (y: int * int[r.r = y]) = fun j -> let v = f (j + 1) in v in
		(n-1,g)
		
let nil : n:int -> (m:int[] * (j:int -> z:int *  int[r. r = z])) =
	fun n -> 
		let f : j:int -> z:int * int[r.r = z] = fun j -> (0,0) in
		(0,f)

let cons : x:(v:int * int[w. w = v]) -> p:(n:int * (i:int -> (y:int * int[r.r = y]))) -> (m:int * (j:int -> (z:int * int[r.r = z]))) =
	fun x -> fun p ->
		let n = p.fst in
		let f = p.snd in
		let g : j:int -> (z:int * int[r.r = z]) = fun j ->
			(assume (j = 0); x) <>
			(assume (j > 0); 
			 let z = f (j - 1) in z) in
		(n+1,g)
			   
let make_list : n:int -> (m:int * (i:int -> (x:int * int[r.r = x]))) = 
	fun n ->
		(assume n = 0;
		 let p = nil 0 in
		 p) <>
		(assume n > 0;
		 let p1 = make_list (n-1) in
		 let p2 = cons (n,n) p1 in
		 p2);;


let for_all : f : (p : (x : int * int[r.r = x]) -> bool[b.b]) -> xs : (n : int * (j:int -> x : int * int[r. r = x])) -> bool[r.r] =
  fun f -> fun xs -> 
    (assume xs.fst = 0;true) <>
    (assume xs.fst > 0;
     let x = head xs in
     let xs1 = tail xs in
     let b = f x in
     (assume b; let z = for_all f xs1 in z) <>
     (assume not b; false));;

let n = * in
let xs = make_list n in
let eq_pair : p : (x : int * int[r. r = x]) -> bool[b.b] =
  fun p -> p.fst = p.snd in
let z = for_all eq_pair xs in
assume (not z);
Fail
