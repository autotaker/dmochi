(* fold_left

let rec fold_left (f:int->int->int) acc xs =
  match xs with
      [] -> acc
    | x::xs' -> fold_left f (f acc x) xs'

let rec make_list n =
  if n < 0
  then []
  else n :: make_list (n-1)

let add x y = x + y

let main n m =
  let xs = make_list n in
    assert (fold_left add m xs >= m)
*)

let head : p: (n:int * (i:int -> int[r. r >= 0])) -> int[r. r >= 0 ] =
	fun p -> 
		let f = p.snd in
		let z = f 0 in
		z;;
		
let tail : p: (n:int * (i:int -> int[r.r >= 0])) -> (m:int * (j:int -> int[r.r >= 0])) =
	fun p ->
		let n = p.fst in
		let f = p.snd in
		let g : j:int -> int[r.r >= 0] = fun j -> let v = f (j + 1) in v in
		(n-1,g)

let nil : n:int -> (m:int * (j:int -> int)) =
	fun n -> 
		let f : j:int -> int = fun j -> assume false; 0 in
		(0,f)

let cons : q : (x:int * (n:int * (i:int -> int[r.r >= 0]))) -> (m:int * (j:int -> int[r.r >= 0])) =
	fun q  ->
        let x = q.fst in
        let p = q.snd in
		let n = p.fst in
		let f = p.snd in
		let g : j:int -> int[r.r>=0] = fun j ->
			(assume (j = 0); x) <>
			(assume (j > 0); 
			 let z = f (j - 1) in z) in
		(n+1,g)

let fold_left : p: (q : (f : (x1 : int -> x2 : int -> int) * int) * (x1 : int * (i : int -> int))) -> int[] =
  fun p -> 
    let q = p.fst in
    let f = q.fst in
    let acc = q.snd in
    let xs = p.snd in
    (assume xs.fst = 0;acc) <>
    (assume xs.fst > 0;
     let xs1 = tail xs in
     let x   = head xs in
     let acc1 = f acc x in
     let r   = fold_left ((f,acc1),xs1) in
     r);;

let make_list : n:int -> (m:int * (i:int -> int)) = 
	fun n ->
		(assume n = 0;
		 let p = nil 0 in
		 p) <>
		(assume n > 0;
		 let p1 = make_list (n-1) in
		 let p2 = cons (n,p1) in
		 p2);;

let add : x : int -> y : int[y.y >= 0] -> int = 
  fun x -> fun y -> x + y;;

let n = * in
let m = * in
let xs = make_list n in
let r = fold_left ((add,m),xs) in
assume (r < m);
Fail
