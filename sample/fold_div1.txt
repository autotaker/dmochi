(* fold_left
exception DivisionByZero

let rec fold_left f acc xs =
  match xs with
      [] -> acc
    | x::xs' -> fold_left f (f acc x) xs'

let rec randpos() =
 let n = Random.int(0) in
  if n>0 then n else randpos()

let rec make_list n =
  if n <= 0
  then []
  else randpos() :: make_list (n-1)

let div x y =
  if y=0 then raise DivisionByZero
  else Random.int(0) (* "/" is unsupported *)

let main n m =
  let xs = make_list n in
    fold_left div m xs

*)
let head : p: (i:int -> int) -> int =
	fun p -> let z = p 0 in z;;
		
let tail : p: (i:int -> int) -> (j:int -> int) =
	fun p ->
		let g : j:int -> int = fun j -> let v = p (j + 1) in v in g;;

let nil : n:int -> (j:int -> int) =
	fun n -> 
		let f : j:int -> int = fun j -> assume false; 0 in f;;

let cons : x:int -> p:(i:int -> int) -> (j:int -> int) =
	fun x -> fun p ->
		let g : j:int -> int = fun j -> x <> (let z = p (j - 1) in z) in g

let fold_left : f : (x1 : int -> x2 : int -> int) -> 
                acc : int -> 
                xs : (i : int -> int) -> 
                int =
  fun f -> fun acc -> fun xs -> 
    (acc) <>
    (let xs1 = tail xs in
     let x   = head xs in
     let acc1 = f acc x in
     let r   = fold_left f acc1 xs1 in
     r);;

let make_list : n:int -> (i:int -> int) = 
	fun n ->
		(assume n = 0;
		 let p = nil 0 in
		 p) <>
		(assume n > 0;
		 let p1 = make_list (n-1) in
         let x  = rand_pos 0 in
		 let p2 = cons x p1 in
		 p2);;


let rand_pos : x : int -> int =
    fun x -> 
      let x = * in
      assume x > 0; x;;

let div : x : int -> y : int -> int = 
  fun x -> fun y -> 
    if y = 0 then Fail else let v = * in v;;

let n = * in
let m = * in
let xs = make_list n in
let r = fold_left div m xs in
r;;
