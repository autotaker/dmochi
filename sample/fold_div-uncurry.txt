(* fold_left
exception DivisionByZero

let rec fold_left f acc xs =
  match xs with
      [] -> acc
    | x::xs' -> fold_left f (f acc x) xs'

let rec randpos() =
 let n = Random.int(0) in
  if n>0 then n else randpos()

let rec make_list n =
  if n <= 0
  then []
  else randpos() :: make_list (n-1)

let div x y =
  if y=0 then raise DivisionByZero
  else Random.int(0) (* "/" is unsupported *)

let main n m =
  let xs = make_list n in
    fold_left div m xs

*)

let head : p: (n:int * (i:int -> int[r. r > 0])) -> int[r. r > 0 ] =
	fun p -> 
		let f = p.snd in
		let z = f 0 in
		z;;
		
let tail : p: (n:int * (i:int -> int[r.r > 0])) -> (m:int * (j:int -> int[r.r > 0])) =
	fun p ->
		let n = p.fst in
		let f = p.snd in
		let g : j:int -> int[r.r > 0] = fun j -> let v = f (j + 1) in v in
		(n-1,g)

let nil : n:int -> (m:int * (j:int -> int[r.r > 0])) =
	fun n -> 
		let f : j:int -> int[r.r > 0] = fun j -> assume false; 1 in
		(0,f)

let cons : q : (x:int * (n:int * (i:int -> int[r.r > 0]))) -> (m:int * (j:int -> int[r.r > 0])) =
	fun q ->
        let x = q.fst in
        let p = q.snd in
		let n = p.fst in
		let f = p.snd in
		let g : j:int -> int[r.r > 0] = fun j ->
			(assume (j = 0); x) <>
			(assume (j > 0); 
			 let z = f (j - 1) in z) in
		(n+1,g)

let fold_left : q : p1 : (f : (p : (x1 : int * int) -> int) * int) * (x1 : int * (i : int -> int)) -> int =
  fun q ->
    let f = (q.fst).fst in
    let acc = (q.fst).snd in
    let xs = q.snd in
    (assume xs.fst = 0;acc) <>
    (assume xs.fst > 0;
     let xs1 = tail xs in
     let x   = head xs in
     let acc1 = f (acc,x) in
     let r   = fold_left ((f,acc1),xs1) in
     r);;

let make_list : n:int -> (m:int * (i:int -> int[r.r > 0])) = 
	fun n ->
		(assume n = 0;
		 let p = nil 0 in
		 p) <>
		(assume n > 0;
		 let p1 = make_list (n-1) in
     let x  = rand_pos 0 in
		 let p2 = cons (x,p1) in
		 p2);;


let rand_pos : x : int -> int[r. r > 0 ] =
    fun x -> 
      let x = * in
      assume x > 0;
      x;;

let div : p : (x : int * int) -> int = 
  fun p ->
    let x = p.fst in
    let y = p.snd in
    (assume (y = 0);Fail) <> 
    (assume not (y = 0);
     let v = * in 
     v);;

let n = * in
let m = * in
let xs = make_list n in
let r = fold_left ((div,m),xs) in
r;;
