let head : [int * ([int] -> int)] -> int =
    fun p -> let f = p.snd in
             let z = f 0 in
             z;;

let tail : [int * ([int] -> int)] -> int * ([int] -> int) =
    fun p -> 
        let n = p.fst in
        let f = p.snd in
        let g : [int] -> int = fun i -> let r = f (i + 1) in r in
        (n - 1, g);;

let nil : [] -> int * ([int] -> int) =
    fun () -> let f : [int] -> int = fun i -> assume false; 0 in
              (0,f);;

let cons : [int, int * ([int] -> int)] -> int * ([int] -> int) =
    fun x p -> let n = p.fst in
               let f = p.snd in
               let g : [int] -> int = fun i -> if i =  0 then x else let r = f (i - 1) in r in
               (n + 1, g)
 
let make_list : [int] -> int * ([int] -> int) =
    fun n ->
        if n = 0 then
            let r = nil () in r
        else
            let xs = make_list (n - 1) in
            let r = cons n xs in
            r;;


let n = * in
let xs = make_list n in
assume n > 0;
assume xs.fst = 0;
Fail
