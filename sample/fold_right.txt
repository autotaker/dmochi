(* fold_left

let rec fold_right (f:int->int->int) xs acc =
  match xs with
      [] -> acc
    | x::xs' -> f x (fold_left f acc xs')

let rec make_list n =
  if n < 0
  then []
  else n :: make_list (n-1)

let add x y = x + y

let main n m =
  let xs = make_list n in
    assert (fold_right add xs m >= m)
*)

let head : p: (n:int * (i:int -> int[r. r >= 0])) -> int[r. r >= 0 ] =
	fun p -> 
		let f = p.snd in
		let z = f 0 in
		z;;
		
let tail : p: (n:int * (i:int -> int[r.r >= 0])) -> (m:int * (j:int -> int[r.r >= 0])) =
	fun p ->
		let n = p.fst in
		let f = p.snd in
		let g : j:int -> int[r.r >= 0] = fun j -> let v = f (j + 1) in v in
		(n-1,g)

let nil : n:int -> (m:int * (j:int -> int[r.r >= 0])) =
	fun n -> 
		let f : j:int -> int[r.r>=0] = fun j -> assume false; 0 in
		(0,f)

let cons : x:int[x.x >= 0] -> p:(n:int * (i:int -> int[r.r >= 0])) -> (m:int * (j:int -> int[r.r >= 0])) =
	fun x -> fun p ->
		let n = p.fst in
		let f = p.snd in
		let g : j:int -> int[r.r>=0] = fun j ->
			(assume (j = 0); x) <>
			(assume (j > 0); 
			 let z = f (j - 1) in z) in
		(n+1,g)

let fold_right : f : (x1 : int -> x2 : int[x2.x2 >=0] -> int[r.r >= x1]) -> 
                xs : (x1 : int * (i : int -> int[r.r >= 0])) -> 
                acc : int -> 
                int[r.r >= acc] =
  fun f -> fun xs -> fun acc -> 
    (assume xs.fst = 0;acc) <>
    (assume xs.fst > 0;
     let xs1 = tail xs in
     let x   = head xs in
     let acc1 = fold_right f xs1 acc in
     let r = f x acc1 in
     r);;

let make_list : n:int -> (m:int * (i:int -> int[r.r >= 0])) = 
	fun n ->
		(assume n = 0;
		 let p = nil 0 in
		 p) <>
		(assume n > 0;
		 let p1 = make_list (n-1) in
		 let p2 = cons n p1 in
		 p2);;

let add : x : int -> y : int[y.y >= 0] -> int[r.r >= x] = 
  fun x -> fun y -> x + y;;

let n = * in
let m = * in
let xs = make_list n in
let r = fold_right add xs m in
assume (r < m);
Fail
