(*
let is_nil (xs:int list) =
  match xs with
      [] -> true
    | _ -> false

let rec make_list n =
  if n = 0
  then []
  else n :: make_list (n-1)

let main n =
  let xs = make_list n in
    if n > 0
    then assert (not (is_nil xs))
    else ()
*)

		
let nil : n:int -> (m:int[m. m = 0] * (j:int -> int)) =
	fun n -> 
		let f : j:int -> int = fun j -> 0 in
		(0,f)

let cons : x:int -> p:(n:int * (i:int -> int)) -> (m:int[m. m = p.fst + 1] * (j:int -> int)) =
	fun x -> fun p ->
		let n = p.fst in
		let f = p.snd in
		let g : j:int -> int = fun j ->
			(assume (j = 0); x) <>
			(assume (j > 0); 
			 let z = f (j - 1) in z) in
		(n+1,g)
			   

let make_list : n:int -> (m:int[m.n = m] * (i:int -> int)) = 
	fun n ->
		(assume n = 0;
		 let p = nil 0 in
		 p) <>
		(assume n > 0;
		 let p1 = make_list (n-1) in
		 let p2 = cons n p1 in
		 p2)

let is_nil : p : (n : int[n.n > 0] * (i:int -> int)) -> bool[b.b] =
  fun p -> p.fst = 0;;

let n = * in
let xs = make_list n in
assume n > 0;
(* let b = is_nil xs in *)
let b = xs.fst = 0 in
assume b;
Fail
