(* fold_left

let rec fold_left (f:int->int->int) acc xs =
  match xs with
      [] -> acc
    | x::xs' -> fold_left f (f acc x) xs'

let rec make_list n =
  if n < 0
  then []
  else n :: make_list (n-1)

let add x y = x + y

let main n m =
  let xs = make_list n in
    assert (fold_left add m xs >= m)
*)

let head : p: (n:int * (i:int -> int)) -> int =
	fun p -> 
		let f = p.snd in
		let z = f 0 in
		z;;
		
let tail : p: (n:int * (i:int -> int)) -> (m:int * (j:int -> int)) =
	fun p ->
		let n = p.fst in
		let f = p.snd in
		let g : j:int -> int = fun j -> let v = f (j + 1) in v in
		(n-1,g)

let fold_left : f : (x1 : int -> x2 : int -> int) -> 
                acc : int -> 
                xs : (x1 : int * (i : int -> int)) -> 
                int =
  fun f -> fun acc -> fun xs -> 
    (assume xs.fst = 0;acc) <>
    (assume xs.fst > 0;
     let xs1 = tail xs in
     let x   = head xs in
     let acc1 = f acc x in
     let r   = fold_left f acc1 xs1 in
     r);;

let add : x : int -> y : int -> int = 
  fun x -> fun y -> x + y;;

let n = * in
let m = * in
let g : j: int -> int = fun j -> assume j > 0; j in
let xs = (n, g) in
let r = fold_left add m xs in
assume (r < m);
Fail
