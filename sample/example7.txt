let nil : j:int -> int = fun n -> assume false; 0;;
let cons : x:int -> p:(i:int -> int) -> (j:int -> int) = 
fun x -> fun f -> 
    let g : j:int -> int = fun j -> x in
		g

let fold_left : acc : int -> xs : (i : int -> int) -> int =
  fun acc -> fun xs -> 
    (acc) <>
    (let x = xs 0 in
     let r = fold_left (acc + x) xs in
     r);;

let make_list : n:int -> (i:int -> int[r.r >= 0]) = 
	fun n ->
		(nil) <>
		(let p1 = make_list (n-1) in
		 let p2 = cons n p1 in p2);;

let n = * in
let m = * in
let xs = make_list n in
let r = fold_left m xs in
assume (r < m);
Fail
