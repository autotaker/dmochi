let head : [int * ([int] -> [int] -> int)] -> [int] -> int =
    fun p -> let f = p.snd in
             let z = f 0 in
             z;;

let tail : [int * ([int] -> [int] -> int)] -> int * ([int] -> [int] -> int) =
    fun p -> 
        let n = p.fst in
        let f = p.snd in
        let g : [int] -> [int] -> int = fun i -> let r = f (i + 1) in r in
        (n - 1, g);;

let nil : [] -> int * ([int] -> [int] -> int) =
    fun () -> let f : [int] -> [int] -> int = fun i -> assume false; fun y -> 0 in
              (0,f);;

let cons : [([int] -> int), int * ([int] -> [int] -> int)] -> int * ([int] -> [int] -> int) =
    fun x p -> let n = p.fst in
               let f = p.snd in
               let g : [int] -> [int] -> int = fun i -> if i = 0 then x else let r = f (i - 1) in r in
               (n + 1, g)
 
let fold_right : [([([int] -> int), ([int] -> int)] -> [int] -> int), int * ([int] -> [int] -> int), ([int] -> int)] -> [int] -> int =
    fun f xs acc ->
        if xs.fst = 0 then
            acc
        else
            let x = head xs in
            let xs1 = tail xs in
            let acc1 = fold_right f xs1 acc in
            let r = f x acc1 in
            r;;
         
let make_list : [int] -> int * ([int] -> [int] -> int) =
    fun n ->
        if n = 0 then
            let r = nil () in r
        else
            let xs = make_list (n - 1) in
            let f : [int] -> int = fun m -> m + n in
            let r = cons f xs in
            r;;

let n = * in
let m = * in
let xs = make_list n in
let id : [int] -> int = fun x -> x in
let compose : [([int] -> int), ([int] -> int)] -> [int] -> int =
    fun f g -> fun x -> let r1 = g x in
                        let r = f r1 in
                        r in
let f = fold_right compose xs id in
let r = f m in 
assume (r < m);
Fail
