let head : p: (n:int[] * (i:int[] -> int[])) -> int[] =
	fun p -> 
		let f = p.snd in
		let z = f 0 in
		z;;
		
let tail : p: (n:int[] * (i:int[] -> int[])) -> (m:int[m. m = p.fst - 1] * (j:int[] -> int[])) =
	fun p ->
		let n = p.fst in
		let f = p.snd in
		let g : j:int -> int = fun j -> let v = f (j + 1) in v in
		(n-1,g)
		
let nil : n:int -> (m:int[m. m = 0] * (j:int -> int)) =
	fun n -> 
		let f : j:int -> int = fun j -> 0 in
		(0,f)

let cons : q : (x:int * (n:int * (i:int -> int))) -> (m:int * (j:int -> int)) =
    fun q -> 
    let x = q.fst in
    let p = q.snd in
    let n = p.fst in
    let f = p.snd in
    let g : j:int -> int = fun j ->
        (assume (j = 0); x) <>
        (assume (j > 0); 
         let z = f (j - 1) in z) in
    (n+1,g)
			   
let length : p:(n:int * (i:int -> int)) -> int = fun p -> 
	(assume p.fst = 0;0) <>
	(assume p.fst > 0;
	 let p1 = tail p in
	 let r = length p1 in
	 r + 1);;

let make_list : n:int -> (m:int[m.n = m] * (i:int -> int)) = 
	fun n ->
		(assume n = 0;
		 let p = nil 0 in
		 p) <>
		(assume n > 0;
		 let p1 = make_list (n-1) in
		 let p2 = cons (n,p1) in
		 p2)
		 

let n = * in
let xs = make_list n in
let m = length xs in
assume not (m = n);
Fail
