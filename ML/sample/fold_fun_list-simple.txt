(*
let rec make_list n =
  if n <= 0
  then []
  else (fun m -> n + m) :: make_list (n-1)

let rec fold_right f xs init =
  match xs with
      [] -> init
    | x::xs' -> f x (fold_right f xs' init)

let compose f g x = f (g x)

let main n =
  let xs = make_list n in
  let f = fold_right compose xs (fun x -> x) in
    assert (f 0 >= 0)
*)

let head : p : (n : int * (i : int -> x : int -> int)) -> x : int -> int =
  fun p ->
    let f = p.snd in
    let z = f 0 in
    z;;

let tail : p: (n : int * (i : int -> x : int -> int)) -> (m : int * (j : int -> y : int -> int)) =
	fun p ->
		let n = p.fst in
		let f = p.snd in
		let g : j:int -> y : int -> int = fun j -> let v = f (j + 1) in v in
		(n-1,g);;

let nil : n : int -> (m : int * (j : int -> y : int -> int)) =
  fun n -> 
		let f : j:int -> y : int -> int = fun j -> fun y -> y in
		(0,f);;

let cons : f : (y : int -> int) -> p : (n : int * (i : int -> x : int -> int)) -> (m : int * (j : int -> y : int -> int)) =
	fun x -> fun p ->
		let n = p.fst in
		let f = p.snd in
		let g : j : int -> y : int -> int = fun j ->
			(assume (j = 0); x) <>
			(assume (j > 0); 
			 let z = f (j - 1) in z) in
		(n+1,g);;

let fold_right : h : (f : (x : int -> int) -> g : (x : int -> int) -> x : int -> int) -> 
                 xs : (n : int * (i : int -> x : int -> int)) ->
                 init : (x : int -> int) ->
                 x : int -> 
                 int =
  fun h -> fun xs -> fun init ->
    (assume xs.fst = 0; init) <>
    (assume xs.fst > 0; 
      let f = head xs in
      let xs' = tail xs in
      let g = fold_right h xs' init in
      let r = h f g in
      r);;

let compose : f : (x : int -> int) -> g : (x : int -> int) -> x : int -> int =
  fun f -> fun g -> fun x ->
    let x1 = g x in
    let x2 = f x1 in
    x2;;

let make_list : n : int -> (m : int * (j : int -> y : int -> int)) =
  fun n ->
    (assume n = 0;
     let r = nil 0 in
     r) <>
    (assume n > 0;
     let r = make_list (n - 1) in
     let f : m : int -> int = fun m -> n + m in
     let r' = cons f r in
     r');;

let rand_int : x : int -> int =
    fun x -> 0;;

let n = rand_int 0 in
let m = rand_int 0 in
let xs = make_list n in
let id : x : int -> int = fun x -> x in
let v = fold_right compose xs id m in
assume (v < m);
Fail

